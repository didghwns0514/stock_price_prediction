"""
1) EXAMPLE
          [GetCodeListByMarket() 함수]
          
          GetCodeListByMarket(
          BSTR sMarket    // 시장구분값
          )
          
          국내 주식 시장별 종목코드를 ';'로 구분해서 전달합니다. 만일 시장구분값이 NULL이면 전체 시장코드를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          
          [시장구분값]
          0 : 장내
          10 : 코스닥
          3 : ELW
          8 : ETF
          50 : KONEX
          4 :  뮤추얼펀드
          5 : 신주인수권
          6 : 리츠
          9 : 하이얼펀드
          30 : K-OTC
          
          
2)

          [GetMasterConstruction() 함수]
          
          GetMasterConstruction(
          BSTR strCode  // 종목코드
          }
          
          입력한 종목코드에 해당하는 종목의 감리구분(정상, 투자주의, 투자경고, 투자위험, 투자주의환기종목)을 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
          

          [GetMasterStockState() 함수]
          
          GetMasterStockState(
          BSTR strCode  // 종목코드
          )
          
          입력한 종목의 증거금 비율, 거래정지, 관리종목, 감리종목, 투자융의종목, 담보대출, 액면분할, 신용가능 여부를 전달합니다.
          
          로그인 한 후에 사용할 수 있는 함수입니다.
	


 [ opt10001 : 주식기본정보요청 ]

 1. Open API 조회 함수 입력값을 설정합니다.
	종목코드 = 전문 조회할 종목코드
	SetInputValue("종목코드"	,  "입력값 1");


 2. Open API 조회 함수를 호출해서 전문을 서버로 전송합니다.
	CommRqData( "RQName"	,  "opt10001"	,  "0"	,  "화면번호"); 
http://blog.naver.com/PostView.nhn?blogId=testist516&logNo=221382171323&redirect=Dlog&widgetTypeCall=true&directAccess=false
          

3)
      [실시간 데이터]
      시세조회요청이 성공하면 관련 실시간 시세데이터가 발생했을때 서버에서 자동으로 OnReceiveRealData()이벤트로 실시간 타입단위로 전달해줍니다.
      KOA Studio의 실시간 탭을 여시면 Real Type과 "주식시세"에서 "종목프로그램매매"까지 나열된 이름을 확인할 수 있습니다.
      이들 하나하나를 실시간 타입이라고 하며 관련있는 FID(숫자)와 이름(실시간 항목)를 임의로 모아놓은 것입니다.
      예를들어 실시간 타입 "주식시세"는 FID 10 현재가 ~ FID 568 하한가발생시간까지 19개 FID로 구성되며 한꺼번에 전달되는것입니다.
      또 실시간 타입 "주식체결"는 FID 20 체결시간 ~ FID 1313 Extra Item까지 35개 FID가 한번에 전달됩니다.
      
      [실시간 데이터 - 주의사항]
      실시간 타입 "주문체결", "잔고", "파생잔고"는 주문관련 실시간 데이터를 전달하기 때문에 시세조회한 뒤나 SetRealReg()함수로 등록해서 사용할 수 없습니다.
      이 실시간 타입은 주문을 해야 발생하며 주문전용 OnReceiveChejanData()이벤트로 전달됩니다.

      아래 실시간 타입은 시스템 내부용으로 사용할수없는 실시간 타입입니다.
      1. 임의연장정보
      2. 시간외종목정보
      3. 주식거래원
      4. 순간체결량
      5. 선물옵션합계
      6. 투자자별매매

      [참고 SetRealReg() 함수]
      SetRealReg()함수로도 실시간 시세데이터 수신이 가능하며 시세조회요청과 방법만 다를뿐 수신하는 실시간 시세데이터 그리고 데이터 처리 방법은 동일합니다
      이 함수는 조건검색 항목에서 사용법을 설명하고 있습니다.
      
      
      

          [DisconnectRealData() 함수]
          
          DisconnectRealData(
          BSTR sScnNo // 화면번호 
          )
          
          화면번호 설정한 실시간 데이터를 해지합니다.   
          
          
          [CommKwRqData() 함수] -> 이거 뭐하는 애지?????
          
          CommKwRqData(
          BSTR sArrCode,    // 조회하려는 종목코드 리스트
          BOOL bNext,   // 연속조회 여부 0:기본값, 1:연속조회(지원안함)
          int nCodeCount,   // 종목코드 갯수
          int nTypeFlag,    // 0:주식 관심종목, 3:선물옵션 관심종목
          BSTR sRQName,   // 사용자 구분명
          BSTR sScreenNo    // 화면번호
          )
          
          한번에 100종목을 조회할 수 있는 관심종목 조회함수인데 영웅문HTS [0130] 관심종목 화면과는 이름만 같은뿐 전혀관련이 없습니다.
          함수인자로 사용하는 종목코드 리스트는 조회하려는 종목코드 사이에 구분자';'를 추가해서 만들면 됩니다.
          조회데이터는 관심종목정보요청(OPTKWFID) Output을 참고하시면 됩니다.
          이 TR은 CommKwRqData()함수 전용으로 임의로 사용하시면 에러가 발생합니다.     
          
          

          [GetCommRealData() 함수]
          
          GetCommRealData(
          BSTR strCode,   // 종목코드
          long nFid   // 실시간 타입에 포함된FID
          )
          
          OnReceiveRealData()이벤트가 호출될때 실시간데이터를 얻어오는 함수입니다.
          이 함수는 반드시 OnReceiveRealData()이벤트가 호출될때 그 안에서 사용해야 합니다.
          
          ------------------------------------------------------------------------------------------------------------------------------------
          
          [주식체결 실시간 데이터 예시]
          
          if(strRealType == _T("주식체결"))
          {
            strRealData = m_KOA.GetCommRealData(strCode, 10);   // 현재가
            strRealData = m_KOA.GetCommRealData(strCode, 13);   // 누적거래량
            strRealData = m_KOA.GetCommRealData(strCode, 228);    // 체결강도
            strRealData = m_KOA.GetCommRealData(strCode, 20);  // 체결시간
          }
          
          

          [OnReceiveRealData()이벤트]
          
          OnReceiveRealData(
          BSTR sCode,        // 종목코드
          BSTR sRealType,    // 리얼타입
          BSTR sRealData    // 실시간 데이터 전문
          )
          
          실시간 데이터 수신할때마다 호출되며 SetRealReg()함수로 등록한 실시간 데이터도 이 이벤트로 전달됩니다.
          GetCommRealData()함수를 이용해서 실시간 데이터를 얻을수 있습니다.
            

"""

"""
		#print('로그인 함수 진입...')

		self.setControl("KHOPENAPI.KHOpenAPICtrl.1") # active X 쓰기 위함
		self.OnEventConnect.connect(self.event_connect) # 콜백함수 등록 - event 처리용
														# 이것을 묶어주었기 때문에, OnEventConnect 발생 시, self.event_connect 함수 수행
		self.dynamicCall("CommConnect()") # dynamic 함수로 api의 함수 쓰기위함 - CommConnect : Api 함수
										  # commconnect ~ Qeventloop -> 키움 서버에서 OnEventConnect 생성
		self.login_event_loop = QEventLoop() # pyqt5 class의 event처리용 instance, gui 형태로 만들지 않았음, 명시 loop
		self.login_event_loop.exec_() # exec_ 메써드로 무한루프 생성 -> pyq_object 내에 남아있음. threading써야하는 이유?
	
	
	def event_connect(self, err_code): # 키움증권 event와 처리 매써드 연결하는 부분
		if err_code == 0:
			print('로그인 성공')
		else:
			print('로그인 에러 코드 : ' + str(err_code))
		self.login_event_loop.exit()


		#self.log_stat = self.kiwoom.dynamicCall("GetConnectState()") -> 이거로 backend에서 수행
		
		
		# @ set tr data
	# 	self.kiwoom.dynamicCall("SetInputValue(QString, QString)", "종목코드", code)
	# 	self.kiwoom.dynamicCall("SetInputValue(QString, QString)", "기준일자", "20200419") # 4월-19일
	# 	self.kiwoom.dynamicCall("SetInputValue(QString, QString)", "기준일자", "20200419")
	#
	# 	# @ send tr data to server
	# 	self.kiwoom.dynamicCall("CommRqData(QString, QString, int, QString)", str(code) + "_req", "opt10001", int(look_type), "0101")
	# 	# -> _req는 TR 구분하기 위한 용도
	# 	# look_type  =>  0 : 단순조회 , 1 : 연속조회
	# 	name = self.kiwoom.dynamicCall("CommGetData(QString, QString, QString, int, QString)", str(code) + "_req", "",  "opt10001", 0, "종목명").strip()
	# 	volume = self.kiwoom.dynamicCall("CommGetData(QString, QString, QString, int, QString)", str(code) + "_req", "",  "opt10001", 0, "거래량").strip()
	# 	# self.text_edit.append("종목명: " + name.strip())
	# 	# self.text_edit.append("거래량: " + volume.strip())
	#
	# # def receive_trdata(self, screen_no, rqname, trcode, recordname, prev_next, data_len, err_code, msg1, msg2):
	# # 	if rqname == "opt10001_req":
	# # 		name = self.kiwoom.dynamicCall("CommGetData(QString, QString, QString, int, QString)", trcode, "", rqname,
	# # 									   0, "종목명")
	# # 		volume = self.kiwoom.dynamicCall("CommGetData(QString, QString, QString, int, QString)", trcode, "", rqname,
	# # 										 0, "거래량")
	# #
	# # 		self.text_edit.append("종목명: " + name.strip())
	# # 		self.text_edit.append("거래량: " + volume.strip())